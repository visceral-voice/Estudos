Ambiente dos sonhos no Windows com WSL2 e VSCode
	- https://github.com/codeedu/wsl2-docker-quickstart
		wslconfig
	- Windows Terminal
	- oh my zsh no wsl 2 https://dev.to/erickrock80/pt-br-instalando-oh-my-zsh-no-windows-terminal-3a8l
						 Tema: sobole
	  Alterar o tema: code ~/.zshrc
					ZSH_THEME="fino"
	- Power Toys
	- VSCode
		Config Dist 
		https://gist.github.com/argentinaluiz/f134417fa4753064820b6ee2af194e55
	- Acessar pelo Windows Explorer
		\\wsl$
		

Docker e Portainer do zero: Containers em desenvolvimento
	https://hub.docker.com/
	
	- docker 
		docker run ubuntu
		docker ps
		docker run hello-world
		docker ps -a
		docker run nginx (Servidor Web)
		docker run -p 8080:80 nginx (Servidor Web direcionando a porta local 8080 para a porta 80 do docker)
		docker exec -it jolly_ [<-nome da imagem] bash (entra na imagem do docker)
		docker images
		docker run -d -p 8080:80 nginx (Sobe o servidor sem travar o terminal)
		sudo service docker status
		sudo service docker start
		
	- Dockerfile
		FROM nginx:latest
		COPY html/* /usr/share/nginx/html
	- Comando para criar a imagem
		docker build -t visceral/nginx-fc-esquenta2 . (Busca os arquivos no mesmo diretorio)
		comando criar parametro usuario Docker Hub/nome da imagem  indica que o Dockerfile está no mesmo diretório
	- dockerhub
		docker run -d -p 8080:80 wesleywillians/nginx-fc-esquenta2
	- docker compose
		docker-compose up -d (Subir)
		docker-compose down (termina a execução do docker)
	Exemplo: docker-compose.yaml
		version: '3'
		services:
		  nginx:
				image: nginx
				volumes:
				  - ./nginx:/usr/share/nginx/html/
				ports:
				  - 8080:80
			redis:
				image: redis:alpine
				expose:
				  - 6379
				  
	https://www.portainer.io/
	
React e TypeScript: Pontapé inicial do jeito certo
	- https://github.com/nodesource/distributions/blob/master/README.md (Instalar Node.Js ubuntu)
	- npx create-react-app --template typescript iniciando-react
		code .
		Dockerfile
			FROM node:14.15.4-alpine3.12
			USER node
			WORKDIR /home/node/app
			COPY . . (Copiando todo o projeto para dentro da imagem)
			RUN npm install
			ENTRYPOINT ["npm", "start"]
		.dockerignore
			/node-modules
		Dockerfile II (Sem necessidade de ter a pasta node-modules no projeto da imagem)
			FROM node:14.15.4-alpine3.12
			USER node
			WORKDIR /home/node/app
			COPY . . (Copiando todo o projeto para dentro da imagem)
			ENTRYPOINT [".docker/entrypoint.sh"]
					entrypoint.sh (Liberar acesso ao arquivo chmod +x .docker/entrypoint.sh)
						npm install
						npm start
		docker build -t iniciando-react .
		docker run -d -p 3000:3000 iniciando-react
		docker stop [nome ou id da imagem]
		docker run -p 3000:3000 -v $(pwd):/home/node/app iniciando-react (Atualiza o container em tempo real)
		docker run -it -p 3000:3000 -v $(pwd):/home/node/app iniciando-react (habilita a interatividade do terminal)
		docker exec it [nome ou id da imagem] /bin/sh (Entra na imagem do docker)
		npm run build (Cria a versão para produção)
	- Preferencia por imagens alpine
	- Dicas
		$(pwd) caminho atual linux

Golang: Do zero ao Multithreading
	- golang.org
		main.go
			go run main.go
			go build main.go
			goos=windows go build main.go (Gera o exe para o windows)
			go mod init github.com/visceral-voice/Estudos/FullCycle/Golang
			go mod tidy
		Post Pelo Terminal
			Invoke-WebRequest -Uri http://localhost:8282/product -Method POST -Body (@{"name"= "Inserção do Produto Feliz";}|ConvertTo-Json) -ContentType "application/json"
		Continuar 01:20:00

Interfaces de impacto com React e Material UI

Apache Kafka: Streaming e mensageria das grandes empresas

Desenvolvimento de APIs com Nest.js

Kafka Connect: Integração entre sistemas na prática

Tempo real com Nest.js e Websockets

Kubernetes: Colocando dois microsserviços em produção